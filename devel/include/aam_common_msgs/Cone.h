// Generated by gencpp from file aam_common_msgs/Cone.msg
// DO NOT EDIT!


#ifndef AAM_COMMON_MSGS_MESSAGE_CONE_H
#define AAM_COMMON_MSGS_MESSAGE_CONE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>
#include <std_msgs/String.h>

namespace aam_common_msgs
{
template <class ContainerAllocator>
struct Cone_
{
  typedef Cone_<ContainerAllocator> Type;

  Cone_()
    : position()
    , color()
    , ratioX(0.0)
    , ratioY(0.0)
    , pcX(0.0)
    , pcY(0.0)  {
    }
  Cone_(const ContainerAllocator& _alloc)
    : position(_alloc)
    , color(_alloc)
    , ratioX(0.0)
    , ratioY(0.0)
    , pcX(0.0)
    , pcY(0.0)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _position_type;
  _position_type position;

   typedef  ::std_msgs::String_<ContainerAllocator>  _color_type;
  _color_type color;

   typedef double _ratioX_type;
  _ratioX_type ratioX;

   typedef double _ratioY_type;
  _ratioY_type ratioY;

   typedef double _pcX_type;
  _pcX_type pcX;

   typedef double _pcY_type;
  _pcY_type pcY;





  typedef boost::shared_ptr< ::aam_common_msgs::Cone_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::aam_common_msgs::Cone_<ContainerAllocator> const> ConstPtr;

}; // struct Cone_

typedef ::aam_common_msgs::Cone_<std::allocator<void> > Cone;

typedef boost::shared_ptr< ::aam_common_msgs::Cone > ConePtr;
typedef boost::shared_ptr< ::aam_common_msgs::Cone const> ConeConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::aam_common_msgs::Cone_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::aam_common_msgs::Cone_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::aam_common_msgs::Cone_<ContainerAllocator1> & lhs, const ::aam_common_msgs::Cone_<ContainerAllocator2> & rhs)
{
  return lhs.position == rhs.position &&
    lhs.color == rhs.color &&
    lhs.ratioX == rhs.ratioX &&
    lhs.ratioY == rhs.ratioY &&
    lhs.pcX == rhs.pcX &&
    lhs.pcY == rhs.pcY;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::aam_common_msgs::Cone_<ContainerAllocator1> & lhs, const ::aam_common_msgs::Cone_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace aam_common_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::aam_common_msgs::Cone_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::aam_common_msgs::Cone_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::aam_common_msgs::Cone_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::aam_common_msgs::Cone_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::aam_common_msgs::Cone_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::aam_common_msgs::Cone_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::aam_common_msgs::Cone_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0f501329c9e6188fb393747c57c79cb9";
  }

  static const char* value(const ::aam_common_msgs::Cone_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0f501329c9e6188fULL;
  static const uint64_t static_value2 = 0xb393747c57c79cb9ULL;
};

template<class ContainerAllocator>
struct DataType< ::aam_common_msgs::Cone_<ContainerAllocator> >
{
  static const char* value()
  {
    return "aam_common_msgs/Cone";
  }

  static const char* value(const ::aam_common_msgs::Cone_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::aam_common_msgs::Cone_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Point position   # coordinate of cone in [x, y]\n"
"std_msgs/String color   # color of cone, 'b' = blue, 'y' = yellow, 'so' = orange , 'bo' = orange\n"
"float64 ratioX\n"
"float64 ratioY\n"
"float64 pcX\n"
"float64 pcY\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/String\n"
"string data\n"
;
  }

  static const char* value(const ::aam_common_msgs::Cone_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::aam_common_msgs::Cone_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.position);
      stream.next(m.color);
      stream.next(m.ratioX);
      stream.next(m.ratioY);
      stream.next(m.pcX);
      stream.next(m.pcY);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Cone_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::aam_common_msgs::Cone_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::aam_common_msgs::Cone_<ContainerAllocator>& v)
  {
    s << indent << "position: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.position);
    s << indent << "color: ";
    s << std::endl;
    Printer< ::std_msgs::String_<ContainerAllocator> >::stream(s, indent + "  ", v.color);
    s << indent << "ratioX: ";
    Printer<double>::stream(s, indent + "  ", v.ratioX);
    s << indent << "ratioY: ";
    Printer<double>::stream(s, indent + "  ", v.ratioY);
    s << indent << "pcX: ";
    Printer<double>::stream(s, indent + "  ", v.pcX);
    s << indent << "pcY: ";
    Printer<double>::stream(s, indent + "  ", v.pcY);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AAM_COMMON_MSGS_MESSAGE_CONE_H
